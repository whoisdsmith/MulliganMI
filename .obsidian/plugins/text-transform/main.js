/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function convertToTitleCase(text, wordBoundaryChars, ignore) {
    // Add space and tab to wordBoundaryChars
    wordBoundaryChars.push(" ", "\t");
    let transformed = "";
    let word = "";
    // Iterate the characters and build each word
    for (const char of text) {
        if (wordBoundaryChars.includes(char)) {
            // push 'word' to 'transformed'
            transformed += convertWord(word, ignore);
            // push 'char' to 'transformed'
            transformed += char;
            // clear 'word'
            word = "";
        }
        else {
            // push 'char' to 'word'
            word += char;
        }
    }
    // Push 'word' one last time
    transformed += convertWord(word, ignore);
    return transformed;
}
function convertWord(word, ignore) {
    if (word.length > 0) {
        // convert to lowercase
        word = word.toLocaleLowerCase();
        // only capitalize if not in 'ignore' list
        if (!ignore.includes(word)) {
            word = word[0].toLocaleUpperCase() + word.slice(1);
        }
    }
    return word;
}

class TextTransformSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.addClass("text-transform-settings");
        new obsidian.Setting(containerEl)
            .setName("Title case exceptions")
            .setDesc("These words will be ignored when transforming text to title case. Each entry must be separated by a comma or space. Entries are case-insensitive.")
            .addText((text) => {
            // Set the value of the text box from the settings
            text.setValue(this.plugin.settings.titleCaseIgnore.join(", "));
            // Set up onChange handler
            text.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                // Convert the string to an array, remove empty entries, ensure all lowercase
                this.plugin.settings.titleCaseIgnore = value.split(/[\s,]+/).map((word) => word.toLowerCase());
                // Save the updated list of words
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Word boundary characters")
            .setDesc("These characters will be used to determine word boundaries when transforming text. Spaces and tabs are always included.")
            .addText((text) => {
            // Set the value of the text box from the settings
            text.setValue(this.plugin.settings.wordBoundaryChars.join(""));
            // Set up onChange handler
            text.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.wordBoundaryChars = [...value.trim()];
                yield this.plugin.saveSettings();
            }));
        });
    }
}

const DEFAULT_SETTINGS = {
    titleCaseIgnore: ["a", "an", "and", "as", "at", "but", "by", "for", "if", "in", "into", "nor", "of", "on", "or", "the", "to"],
    wordBoundaryChars: [],
    snakeUseBoundaryChars: false,
    kebabUseBoundaryChars: false,
};
class TextTransform extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // Load settings
            yield this.loadSettings();
            // Set up settings tab
            this.addSettingTab(new TextTransformSettingsTab(this.app, this));
            // Add default commands for transforming cases
            this.addCommand({
                id: "uppercase",
                name: "Transform to UPPERCASE",
                editorCallback: (editor) => {
                    if (editor.hasFocus()) {
                        const selection = this.getSelection(editor);
                        this.replaceSelection(editor, selection.selectedText.toLocaleUpperCase(), selection.fromOrig, selection.toOrig, selection.fromSel, selection.toSel);
                    }
                },
            });
            this.addCommand({
                id: "lowercase",
                name: "Transform to lowercase",
                editorCallback: (editor) => {
                    if (editor.hasFocus()) {
                        const selection = this.getSelection(editor);
                        this.replaceSelection(editor, selection.selectedText.toLocaleLowerCase(), selection.fromOrig, selection.toOrig, selection.fromSel, selection.toSel);
                    }
                },
            });
            this.addCommand({
                id: "title-case",
                name: "Transform to Title Case",
                editorCallback: (editor) => {
                    if (editor.hasFocus()) {
                        const selection = this.getSelection(editor);
                        const newText = convertToTitleCase(selection.selectedText, this.settings.wordBoundaryChars, this.settings.titleCaseIgnore);
                        this.replaceSelection(editor, newText, selection.fromOrig, selection.toOrig, selection.fromSel, selection.toSel);
                    }
                },
            });
            this.addCommand({
                id: "snake",
                name: "Transform to snake_case",
                editorCallback: (editor) => {
                    if (editor.hasFocus()) {
                        const selection = this.getSelection(editor);
                        this.replaceSelection(editor, selection.selectedText.toLocaleLowerCase(), selection.fromOrig, selection.toOrig, selection.fromSel, selection.toSel);
                    }
                },
            });
            console.log("Text Transform plugin loaded");
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Text Transform plugin unloaded");
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    getSelection(editor) {
        // check if selection has a length > 0
        let selectedText = editor.getSelection();
        const fromOrig = editor.getCursor("from");
        const toOrig = editor.getCursor("to");
        // Clone original positions
        const fromSel = structuredClone(fromOrig);
        const toSel = structuredClone(toOrig);
        // if === 0, get the word the cursor is in
        if (selectedText.length === 0) {
            // Set up boundary chars (include space, tab)
            const chars = this.settings.wordBoundaryChars;
            chars.push(" ", "\t");
            // Get line text
            const lineText = editor.getLine(fromOrig.line);
            fromSel.ch = 0;
            toSel.ch = lineText.length;
            // Read backward from cursor pos to nearest boundary char
            for (let i = fromOrig.ch - 1; i >= 0; i--) {
                const char = lineText[i];
                if (chars.contains(char)) {
                    fromSel.ch = i + 1;
                    break;
                }
            }
            // Read forward to next boundary char
            for (let i = toOrig.ch; i < lineText.length; i++) {
                const char = lineText[i];
                if (chars.contains(char)) {
                    toSel.ch = i;
                    break;
                }
            }
            // Get selected text based on modified range
            selectedText = editor.getRange(fromSel, toSel);
        }
        return { selectedText, fromOrig, toOrig, fromSel, toSel };
    }
    replaceSelection(editor, newText, fromOrig, toOrig, fromSel, toSel) {
        // Save original highlighted length
        const originalLength = editor.getSelection().length;
        // Replace the text using the specified range of the selected 'from' and 'to'
        editor.replaceRange(newText, fromSel, toSel);
        // If text is highlighted, check if 'newText' is shorter than 'originalLength'
        if (originalLength > 0 && newText.length < originalLength) {
            // Move 'to' cursor back by the difference
            toOrig.ch -= originalLength - newText.length;
        }
        // Reset selection (this will take care of no selected text, too)
        editor.setSelection(fromOrig, toOrig);
    }
}

module.exports = TextTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
